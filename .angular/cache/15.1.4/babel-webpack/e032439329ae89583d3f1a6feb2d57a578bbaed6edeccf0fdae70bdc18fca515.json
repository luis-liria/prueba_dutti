{"ast":null,"code":"import { Actions, createEffect, ofType } from '@ngrx/effects';\nimport * as starchipsActions from '../actions/starships.actions';\nimport { mergeMap, map, catchError, tap } from 'rxjs/operators';\nimport { of } from 'rxjs';\nimport { ShipsService } from 'src/app/services/ships.service';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@ngrx/effects\";\nimport * as i2 from \"src/app/services/ships.service\";\nexport let StarschipsEffects = /*#__PURE__*/(() => {\n  class StarschipsEffects {\n    constructor(actions$, shipsService) {\n      this.actions$ = actions$;\n      this.shipsService = shipsService;\n      this.cargarStarchips$ = createEffect(() => this.actions$.pipe(ofType(starchipsActions.cargarStarships), mergeMap(() => this.shipsService.getShips().pipe(tap(data => console.log('chips', data)), map(starships => starchipsActions.cargarStarshipsSuccess({\n        starships: starships\n      })), catchError(err => of(starchipsActions.cargarStarshipsError({\n        payload: err\n      })))))));\n      this.cargarStarchipsPage$ = createEffect(() => this.actions$.pipe(ofType(starchipsActions.cargarStarshipsPage), mergeMap(action => this.shipsService.getShipsPage(action.page).pipe(tap(data => console.log('chippage', data)), map(starships => starchipsActions.cargarStarshipsSuccess({\n        starships: starships\n      })), catchError(err => of(starchipsActions.cargarStarshipsError({\n        payload: err\n      })))))));\n    }\n  }\n  StarschipsEffects.ɵfac = function StarschipsEffects_Factory(t) {\n    return new (t || StarschipsEffects)(i0.ɵɵinject(i1.Actions), i0.ɵɵinject(i2.ShipsService));\n  };\n  StarschipsEffects.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: StarschipsEffects,\n    factory: StarschipsEffects.ɵfac\n  });\n  return StarschipsEffects;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}